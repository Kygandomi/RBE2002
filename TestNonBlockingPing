#include <NewPing.h>
#include <Servo.h>
#include <Encoder.h>
#include <TimerOne.h>

#define lFrontI 12 //left front 
#define lFrontO 13 
#define lBackI 22 //left back 
#define lBackO 23 
#define rFrontI 24 //right front 
#define rFrontO 25 
#define rBackI 26 //right back
#define rBackO 27
#define FrontI 28 //front 
#define FrontO 29

#define LF 0
#define RF 1
#define LB 2
#define RB 3
#define FF 4

#define SONAR_NUM     5 // Number or sensors.
#define MAX_DISTANCE 200 // Maximum distance (in cm) to ping.
#define PING_INTERVAL 33 // Milliseconds between sensor pings (29ms is about the min to avoid cross-sensor echo).

Servo leftM, rightM;

unsigned long pingTimer[SONAR_NUM]; // Holds the times when the next ping should happen for each sensor.
unsigned int cm[SONAR_NUM];         // Where the ping distances are stored.
uint8_t currentSensor = 0;          // Keeps track of which sensor is active.

volatile bool pinging = true;

NewPing sonar[SONAR_NUM] = {     // Sensor object array.
        NewPing(lFrontI, lFrontO, MAX_DISTANCE),
        NewPing(rFrontI, rFrontO, MAX_DISTANCE),
        NewPing(lBackI, lBackO, MAX_DISTANCE),
        NewPing(rBackI, rBackO, MAX_DISTANCE),
        NewPing(FrontI, FrontO, MAX_DISTANCE);
        }

void setup() {
    Serial.begin(115200);
    pingTimer[0] = millis() + 75;           // First ping starts at 75ms, gives time for the Arduino to chill before starting.
    for (uint8_t i = 1; i < SONAR_NUM; i++){ // Set the starting time for each sensor.
        pingTimer[i] = pingTimer[i - 1] + PING_INTERVAL;
    }

    leftM.attach(leftMPin);
    rightM.attach(rightMPin);
      
    myEnc.write(0);
    leftEnc.write(0);  
        
    Timer1.initialize(2000);
    Timer1.attachInterrupt(timerISR);
}

void pingingSensors(){
	
	if (millis() >= pingTimer[currentSensor]){
		pingTimer[currentSensor] += PING_INTERVAL * SONAR_NUM;  // Set next time this sensor will be pinged.
        //if (currentSensor == 0 && currentSensor == SONAR_NUM - 1) oneSensorCycle(); // Sensor ping cycle complete, do something with the results.
        sonar[currentSensor].timer_stop();          // Make sure previous timer is canceled before starting a new ping (insurance).
        cm[currentSensor] = 0;                      // Make distance zero in case there's no ping echo for this sensor.
        sonar[currentSensor].ping_timer(echoCheck); // Do the ping (processing continues, interrupt will call echoCheck to look for echo).
	}

	if(currentSensor < 5) currentSensor++;
	
	else{
		currentSensor = 0;
		pinging = false;
	} 

}

void echoCheck() { // If ping received, set the sensor distance to array.
        if (sonar[currentSensor].check_timer())
                cm[currentSensor] = sonar[currentSensor].ping_result / US_ROUNDTRIP_CM;
}

void oneSensorCycle() { // Sensor ping cycle complete, do something with the results.
        for (uint8_t i = 0; i < SONAR_NUM; i++) {
                Serial.print(i);
                Serial.print("=");
                Serial.print(cm[i]);
                Serial.print("cm ");
        }
        Serial.println();
}

void loop(){
	pingingSensors();
	//wallFollow();

}

void wallFollow(){
	if(!pinging){
		if((cm[FF] < 25) pinging = true; 
	}

}

void driveStraight(){
  int error = (leftEnc.read() - myEnc.read());
  leftM.write(50 + K*error);
  rightM.write(130 + K*error);
}


